using BinaryProvider, Compat, Compat.Libdl

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = Product[
    LibraryProduct(prefix, String["libmbedcrypto"], :libmbedcrypto),
    LibraryProduct(prefix, String["libmbedtls"], :libmbedtls),
    LibraryProduct(prefix, String["libmbedx509"], :libmbedx509),
]

const juliaprefix = try
    dirname(Libdl.dlpath("libmbedtls"))
catch
    joinpath(Compat.Sys.BINDIR, "..")
end

juliaproducts = Product[
    LibraryProduct(juliaprefix, "libmbedtls", :MBED_TLS)
    LibraryProduct(juliaprefix, "libmbedcrypto", :MBED_CRYPTO)
    LibraryProduct(juliaprefix, "libmbedx509", :MBED_X509)
]

# Download binaries from hosted location
bin_prefix = "https://github.com/quinnj/MbedTLSBuilder/releases/download/v0.5"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    BinaryProvider.Linux(:aarch64, :glibc) => ("$bin_prefix/MbedTLS.aarch64-linux-gnu.tar.gz", "2ade27d09870ce758ff7ac3685e9ad43c7839db88d100372371d8283fddf1c64"),
    BinaryProvider.Linux(:armv7l, :glibc) => ("$bin_prefix/MbedTLS.arm-linux-gnueabihf.tar.gz", "ce551dd19141b2d107150541e73568a7c5ce5f3e406689612d1509b80a4380aa"),
    BinaryProvider.Linux(:i686, :glibc) => ("$bin_prefix/MbedTLS.i686-linux-gnu.tar.gz", "d0205bd578827e4d54383cbc31f38b17d8c6c768e95b60a5ab273d6bd88764d8"),
    BinaryProvider.Windows(:i686) => ("$bin_prefix/MbedTLS.i686-w64-mingw32.tar.gz", "f46defab0ba27872d162aa8e1966d949643860b0c746ed632d1f4fc133f9c762"),
    BinaryProvider.Linux(:powerpc64le, :glibc) => ("$bin_prefix/MbedTLS.powerpc64le-linux-gnu.tar.gz", "3b925d28921f9315fa7a0447b323b70250fd1c9d52e40706ec70f9181a1d6a37"),
    BinaryProvider.MacOS() => ("$bin_prefix/MbedTLS.x86_64-apple-darwin14.tar.gz", "9a5b7d43005c925ca72fafe0b74f331b4bc5e9a2ce4afb706aa973e2c2a1a9f3"),
    BinaryProvider.Linux(:x86_64, :glibc) => ("$bin_prefix/MbedTLS.x86_64-linux-gnu.tar.gz", "680889ecb6635f75b936adba93e47cefce63c7cdeffab6f1d41d8f77f5be73f2"),
    BinaryProvider.Windows(:x86_64) => ("$bin_prefix/MbedTLS.x86_64-w64-mingw32.tar.gz", "92985e620d4e6ce66256595e35cb7375533b320029533c484199c51e764b61e8"),
)

# First, check to see if we're all satisfied
if any(!satisfied(p; verbose=verbose) for p in products)
    if haskey(download_info, platform_key())
        # Download and install binaries
        url, tarball_hash = download_info[platform_key()]
        install(url, tarball_hash; prefix=prefix, force=true, verbose=verbose)
        @info "using prebuilt binaries"
        write_deps_file(joinpath(@__DIR__, "deps.jl"), products)
    elseif all(satisfied(p; verbose=verbose) for p in juliaproducts)
        @info "using julia-shippied binaries"
        write_deps_file(joinpath(@__DIR__, "deps.jl"), juliaproducts)
    else
        @info "attempting source build"
        run(Cmd(`./build.sh`, dir=@__DIR__))
        if any(!satisfied(p; verbose=verbose) for p in products)
            error("attmped to build mbedtls shared libraries, but they couldn't be located (deps/usr/lib)")
        else
            write_deps_file(joinpath(@__DIR__, "deps.jl"), products)
        end
    end
end
