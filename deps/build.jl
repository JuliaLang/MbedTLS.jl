using BinaryProvider, Libdl

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, String["libmbedcrypto"], :libmbedcrypto),
    LibraryProduct(prefix, String["libmbedtls"], :libmbedtls),
    LibraryProduct(prefix, String["libmbedx509"], :libmbedx509),
]

const juliaprefix = joinpath(Sys.BINDIR, "..")

juliaproducts = Product[
    LibraryProduct(juliaprefix, "libmbedtls", :libmbedtls)
    LibraryProduct(juliaprefix, "libmbedcrypto", :libmbedcrypto)
    LibraryProduct(juliaprefix, "libmbedx509", :libmbedx509)
]

# Download binaries from hosted location
bin_prefix = "https://github.com/JuliaWeb/MbedTLSBuilder/releases/download/v0.14.0"
old_bin_prefix = "https://github.com/JuliaWeb/MbedTLSBuilder/releases/download/v0.11"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    # mbedtls 2.13.1
    Linux(:aarch64, :glibc) => ("$bin_prefix/MbedTLS.v2.13.1.aarch64-linux-gnu.tar.gz", "58829d5bf8bffe6adcc53824631e74f5bf5309581fc499df916933494f89b544"),
    Linux(:armv7l, :glibc, :eabihf) => ("$bin_prefix/MbedTLS.v2.13.1.arm-linux-gnueabihf.tar.gz", "f6226e417cdb01b7b727de5d9e2a3ed61ab5a4325d64b137e6ce47433aca52d5"),
    Linux(:i686, :glibc) => ("$bin_prefix/MbedTLS.v2.13.1.i686-linux-gnu.tar.gz", "d1f7e9c71d5f6a986c64fc4ae2a3f13f3bb205833e91d599a00b21e61d6eb5ab"),
    Windows(:i686) => ("$bin_prefix/MbedTLS.v2.13.1.i686-w64-mingw32.tar.gz", "d6dba1e95e2de288bb3b3b686909f6d7125c654d5e1c76a77a4ae9a4b547f8c4"),
    Linux(:powerpc64le, :glibc) => ("$bin_prefix/MbedTLS.v2.13.1.powerpc64le-linux-gnu.tar.gz", "4fe5fc9f8293c96e2d3e186309a5ee4c01cf9eeb0e267f178cbcaefa474010d5"),
    MacOS(:x86_64) => ("$bin_prefix/MbedTLS.v2.13.1.x86_64-apple-darwin14.tar.gz", "fef5f82f2187fa0aecfb5ad560fda6c2197c5eb80ae23cd95b811e1087551a99"),
    Linux(:x86_64, :glibc) => ("$bin_prefix/MbedTLS.v2.13.1.x86_64-linux-gnu.tar.gz", "26b30ff9c7764738ee02858d92b1a2b2aa955b91a3184bb620b5707bdf4520a2"),
    FreeBSD(:x86_64) => ("$bin_prefix/MbedTLS.v2.13.1.x86_64-unknown-freebsd11.1.tar.gz", "09b52ea6879e02e20027aa13a940486e253dac26d2bd6379ad084baa18bf7e00"),
    Windows(:x86_64) => ("$bin_prefix/MbedTLS.v2.13.1.x86_64-w64-mingw32.tar.gz", "362ebde4b20440ce2c2cd0b0ef056eaac7833be407803ebd3c86ba4e0867013b"),
    # stuck on mbedtls 2.11.0
    Linux(:aarch64, :musl) => ("$old_bin_prefix/MbedTLS.v1.0.0.aarch64-linux-musl.tar.gz", "c6ee85ea70b80c27adf176ccd5110993559334e6cec56331032967870a2f116f"),
    Linux(:armv7l, :musl, :eabihf) => ("$old_bin_prefix/MbedTLS.v1.0.0.arm-linux-musleabihf.tar.gz", "591591e59e20847ead2bc438fa871f1a4030207a4d3949d62601e1a0502e9206"),
    Linux(:i686, :musl) => ("$old_bin_prefix/MbedTLS.v1.0.0.i686-linux-musl.tar.gz", "5ca97e759f58826e823dc1c65bcb2bd3a9a60fe617111e5cdb5f34d8c08ffed7"),
    Linux(:x86_64, :musl) => ("$old_bin_prefix/MbedTLS.v1.0.0.x86_64-linux-musl.tar.gz", "953eea318471e4af935b36aedc58f56ae66ffe66fb50fe90770a204eaa0bafa8"),
)

# First, check to see if we're all satisfied
if any(!satisfied(p; verbose=verbose) for p in products) || get(ENV, "FORCE_BUILD", "false") != "true"
    if haskey(download_info, platform_key()) && get(ENV, "FORCE_BUILD", "false") != "true" && !haskey(ENV, "USE_GPL_MBEDTLS")
        # Download and install binaries
        url, tarball_hash = download_info[platform_key()]
        install(url, tarball_hash; prefix=prefix, force=true, verbose=verbose)
        @info "using prebuilt binaries"
    elseif all(satisfied(p; verbose=verbose) for p in juliaproducts) && get(ENV, "FORCE_BUILD", "false") != "true"
        @info "using julia-shippied binaries"
        products = juliaproducts
    else
        @info "attempting source build"
        VERSION = "2.13.0"
        url, hash = haskey(ENV, "USE_GPL_MBEDTLS") ?
            ("https://tls.mbed.org/download/mbedtls-$VERSION-gpl.tgz", "a08ddf08aae55fc4f48fbc6281fcb08bc5c53ed53ffd15355ee0d75ec32b53ae") :
            ("https://tls.mbed.org/download/mbedtls-$VERSION-apache.tgz", "593b4e4d2e1629fc407ab4750d69fa309a0ddb66565dc3deb5b60eddbdeb06da")
        download_verify(url, hash, joinpath(@__DIR__, "mbedtls.tgz"), force=true, verbose=true)
        unpack(joinpath(@__DIR__, "mbedtls.tgz"), @__DIR__; verbose=true)
        withenv("VERSION"=>VERSION) do
            run(Cmd(`./build.sh`, dir=@__DIR__))
        end
        if any(!satisfied(p; verbose=verbose) for p in products)
            error("attempted to build mbedtls shared libraries, but they couldn't be located (deps/usr/lib)")
        end
    end
end

write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
