using BinaryProvider, Compat, Compat.Libdl

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = Product[
    LibraryProduct(prefix, String["libmbedcrypto"], :libmbedcrypto),
    LibraryProduct(prefix, String["libmbedtls"], :libmbedtls),
    LibraryProduct(prefix, String["libmbedx509"], :libmbedx509),
]

const juliaprefix = try
    dirname(Libdl.dlpath("libmbedtls"))
catch
    joinpath(Compat.Sys.BINDIR, "..")
end

juliaproducts = Product[
    LibraryProduct(juliaprefix, "libmbedtls", :libmbedtls)
    LibraryProduct(juliaprefix, "libmbedcrypto", :libmbedcrypto)
    LibraryProduct(juliaprefix, "libmbedx509", :libmbedx509)
]

# Download binaries from hosted location
bin_prefix = "https://github.com/quinnj/MbedTLSBuilder/releases/download/v0.5"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    BinaryProvider.Linux(:aarch64, :glibc) => ("$bin_prefix/MbedTLS.aarch64-linux-gnu.tar.gz", "d8c8f2ccb1090acc064114f9173ac3c6465a599b5314d13a4d854c36afe81843"),
    BinaryProvider.Linux(:armv7l, :glibc) => ("$bin_prefix/MbedTLS.arm-linux-gnueabihf.tar.gz", "2886d2bf96436a60580aeced6cf1dc6be9f7f90a7cda8d9d538bd3a75edb4f3a"),
    BinaryProvider.Linux(:i686, :glibc) => ("$bin_prefix/MbedTLS.i686-linux-gnu.tar.gz", "bad2a9126d6609dcfe01550abf1a7a606050f00590607fd2f7295caf05a8d76e"),
    BinaryProvider.Windows(:i686) => ("$bin_prefix/MbedTLS.i686-w64-mingw32.tar.gz", "5eb2d6ac1ce59bca6ebffd9ec79446c5078b6dfb1feabc9921ff77138fbf2303"),
    BinaryProvider.Linux(:powerpc64le, :glibc) => ("$bin_prefix/MbedTLS.powerpc64le-linux-gnu.tar.gz", "9f3878edd1b8fbca536f9f32614bdb2b69a899937485d4ceeb7cb560e51e2533"),
    BinaryProvider.MacOS() => ("$bin_prefix/MbedTLS.x86_64-apple-darwin14.tar.gz", "991cc93598179e1895b1db814dd1d85801b5a6f037f7323c9aac74e3f0d20908"),
    BinaryProvider.Linux(:x86_64, :glibc) => ("$bin_prefix/MbedTLS.x86_64-linux-gnu.tar.gz", "1603eb503252e7bad78691e81230de5f4bbaf1a369fdf8812a9b9e9a16ccf321"),
    BinaryProvider.Windows(:x86_64) => ("$bin_prefix/MbedTLS.x86_64-w64-mingw32.tar.gz", "0a9a6f05dc08349294934e412836bdd292175883d9df015d93d19d5da7429d9d"),
)

# First, check to see if we're all satisfied
if any(!satisfied(p; verbose=verbose) for p in products) || get(ENV, "FORCE_BUILD", false)
    if haskey(download_info, platform_key()) && get(ENV, "FORCE_BUILD", "false") != "true"
        # Download and install binaries
        url, tarball_hash = download_info[platform_key()]
        install(url, tarball_hash; prefix=prefix, force=true, verbose=verbose)
        Compat.@info "using prebuilt binaries"
        write_deps_file(joinpath(@__DIR__, "deps.jl"), products)
    elseif all(satisfied(p; verbose=verbose) for p in juliaproducts) && get(ENV, "FORCE_BUILD", "false") != "true"
        Compat.@info "using julia-shippied binaries"
        write_deps_file(joinpath(@__DIR__, "deps.jl"), juliaproducts)
    else
        Compat.@info "attempting source build"
        VERSION = "2.7.0"
        url, hash = haskey(ENV, "USE_GPL_MBEDTLS") ?
            ("https://tls.mbed.org/download/mbedtls-$VERSION-gpl.tgz", "2c6fe289b4b50bf67b4839e81b07fcf52a19f5129d0241d2aa4d49cb1ef11e4f") :
            ("https://tls.mbed.org/download/mbedtls-$VERSION-apache.tgz", "aeb66d6cd43aa1c79c145d15845c655627a7fc30d624148aaafbb6c36d7f55ef")
        download_verify_unpack(url, hash, @__DIR__, force=true, verbose=true)
        run(Cmd(`./build.sh`, dir=@__DIR__, env=("VERSION"=>VERSION,)))
        if any(!satisfied(p; verbose=verbose) for p in products)
            error("attmped to build mbedtls shared libraries, but they couldn't be located (deps/usr/lib)")
        else
            write_deps_file(joinpath(@__DIR__, "deps.jl"), products)
        end
    end
end
